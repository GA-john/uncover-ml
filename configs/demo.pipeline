# vi:syntax=python

from os import path


#
# Path Settings
#

# As this is set now, it assumes a folder structure like the following:
# ~/data/GA-cover   << location of data (all tif and shp files)
# ~/data/GA-cover/processed     << location of all output files
# ~/data/GA-cover/soilcrossvalindices.hdf5   << cross val hdf5 file from us

# please change the following paths to suit your needs

# Location of data
data_dir = path.join(path.expanduser("~"), "data/GA-cover")
# data_dir = path.join(path.expanduser("~"), "data/GA-depth")
# data_dir = "/short/ge3/jrw547/Murray_datasets"
# data_dir = "/short/ge3/jrw547/GA-cover"

# Location of outputs
output_dir = "."


# Shape file with target variable info
target_file = "geochem_sites.shp"
# target_file = "drillhole_confid_3.shp"
# target_file = "Targets_V8.shp"

# Target variable name (in shape file)
target_var = "Na_ppm_i_1"  # "Cr_ppm_i_1"
# target_var = "depth"

export_targets = True


# Crossval settings

cross_validate = True
folds = 5
crossval_seed = 1


#
# Feature settings
#

# Allows deternministic cross-val. Set to None for a random seed

# Automatically detect integer-valued files and use one-hot encoding?
onehot = False

# Patch size to extract around targets (0 = 1x1 pixel, 1 = 3x3 pixels etc)
patchsize = 0

# Impute missing values?
impute = True

# Transform the data? options are {whiten, standardise, centre, None}
transform = 'standardise'

# Fraction of dimensions to keep *if* whitening
pca_frac = 0.5

# Estimate the relative importance of each feature
rank_features = False

#
# Algorithm settings
#


# Bayesian linear regression
# "sgdbayesreg": {'target_transform': 'standardise', 'maxiter': 5000},

# Approximate Gaussian process, for large scale data
# "approxgp": {
#              'target_transform': 'standardise',
#              'kern': 'matern52',
#              'lenscale': 100.,
#              'nbases': 50},
# "sgdapproxgp": {
#              'target_transform': 'standardise',
#              'kern': 'matern52',
#              'lenscale': 100.,
#              'nbases': 50},

# Support vector machine (regressor)
# "svr": {'target_transform': 'standardise'},

# Random forest regressor
# "randomforest": {'n_estimators': 100},


algorithm = 'randomforest'
algorithm_options = {'n_estimators': 100}
# algorithm_options = {'target_transform': 'standardise'}

#
# Prediction settings
#

# How much data to keep in memory at a time
memory_fraction = 0.5

# Name of the prediction algorithm
# algorithm = 'svr'
# algorithm = 'sgdbayesreg'
# algorithm = 'approxgp'
# algorithm = 'sgdapproxgp'
# algorithm = 'randomforest'

# Quantiles
quantiles = 0.95
